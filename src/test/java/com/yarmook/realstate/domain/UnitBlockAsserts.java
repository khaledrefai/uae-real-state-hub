package com.yarmook.realstate.domain;

import static com.yarmook.realstate.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class UnitBlockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitBlockAllPropertiesEquals(UnitBlock expected, UnitBlock actual) {
        assertUnitBlockAutoGeneratedPropertiesEquals(expected, actual);
        assertUnitBlockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitBlockAllUpdatablePropertiesEquals(UnitBlock expected, UnitBlock actual) {
        assertUnitBlockUpdatableFieldsEquals(expected, actual);
        assertUnitBlockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitBlockAutoGeneratedPropertiesEquals(UnitBlock expected, UnitBlock actual) {
        assertThat(actual)
            .as("Verify UnitBlock auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitBlockUpdatableFieldsEquals(UnitBlock expected, UnitBlock actual) {
        assertThat(actual)
            .as("Verify UnitBlock relevant properties")
            .satisfies(a -> assertThat(a.getNormalizedType()).as("check normalizedType").isEqualTo(expected.getNormalizedType()))
            .satisfies(a -> assertThat(a.getUnitType()).as("check unitType").isEqualTo(expected.getUnitType()))
            .satisfies(a -> assertThat(a.getBedroomsAmount()).as("check bedroomsAmount").isEqualTo(expected.getBedroomsAmount()))
            .satisfies(a -> assertThat(a.getUnitBedrooms()).as("check unitBedrooms").isEqualTo(expected.getUnitBedrooms()))
            .satisfies(a -> assertThat(a.getAreaUnit()).as("check areaUnit").isEqualTo(expected.getAreaUnit()))
            .satisfies(a -> assertThat(a.getUnitsAmount()).as("check unitsAmount").isEqualTo(expected.getUnitsAmount()))
            .satisfies(a -> assertThat(a.getUnitsAreaFrom()).as("check unitsAreaFrom").isEqualTo(expected.getUnitsAreaFrom()))
            .satisfies(a -> assertThat(a.getUnitsAreaTo()).as("check unitsAreaTo").isEqualTo(expected.getUnitsAreaTo()))
            .satisfies(a -> assertThat(a.getUnitsAreaFromM2()).as("check unitsAreaFromM2").isEqualTo(expected.getUnitsAreaFromM2()))
            .satisfies(a -> assertThat(a.getUnitsAreaToM2()).as("check unitsAreaToM2").isEqualTo(expected.getUnitsAreaToM2()))
            .satisfies(a ->
                assertThat(a.getUnitsPriceFrom())
                    .as("check unitsPriceFrom")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getUnitsPriceFrom())
            )
            .satisfies(a ->
                assertThat(a.getUnitsPriceTo())
                    .as("check unitsPriceTo")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getUnitsPriceTo())
            )
            .satisfies(a -> assertThat(a.getPriceCurrency()).as("check priceCurrency").isEqualTo(expected.getPriceCurrency()))
            .satisfies(a -> assertThat(a.getTypicalImageUrl()).as("check typicalImageUrl").isEqualTo(expected.getTypicalImageUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitBlockUpdatableRelationshipsEquals(UnitBlock expected, UnitBlock actual) {
        assertThat(actual)
            .as("Verify UnitBlock relationships")
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()));
    }
}
