package com.yarmook.realstate.domain;

import static com.yarmook.realstate.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class UnitAvailabilityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAvailabilityAllPropertiesEquals(UnitAvailability expected, UnitAvailability actual) {
        assertUnitAvailabilityAutoGeneratedPropertiesEquals(expected, actual);
        assertUnitAvailabilityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAvailabilityAllUpdatablePropertiesEquals(UnitAvailability expected, UnitAvailability actual) {
        assertUnitAvailabilityUpdatableFieldsEquals(expected, actual);
        assertUnitAvailabilityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAvailabilityAutoGeneratedPropertiesEquals(UnitAvailability expected, UnitAvailability actual) {
        assertThat(actual)
            .as("Verify UnitAvailability auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAvailabilityUpdatableFieldsEquals(UnitAvailability expected, UnitAvailability actual) {
        assertThat(actual)
            .as("Verify UnitAvailability relevant properties")
            .satisfies(a -> assertThat(a.getBuildingName()).as("check buildingName").isEqualTo(expected.getBuildingName()))
            .satisfies(a -> assertThat(a.getAreaFrom()).as("check areaFrom").isEqualTo(expected.getAreaFrom()))
            .satisfies(a -> assertThat(a.getAreaUnit()).as("check areaUnit").isEqualTo(expected.getAreaUnit()))
            .satisfies(a -> assertThat(a.getBedroomType()).as("check bedroomType").isEqualTo(expected.getBedroomType()))
            .satisfies(a -> assertThat(a.getLastUpdated()).as("check lastUpdated").isEqualTo(expected.getLastUpdated()))
            .satisfies(a -> assertThat(a.getPriceCurrency()).as("check priceCurrency").isEqualTo(expected.getPriceCurrency()))
            .satisfies(a ->
                assertThat(a.getPriceFrom()).as("check priceFrom").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPriceFrom())
            )
            .satisfies(a ->
                assertThat(a.getPriceTo()).as("check priceTo").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPriceTo())
            )
            .satisfies(a -> assertThat(a.getUnitsAvailable()).as("check unitsAvailable").isEqualTo(expected.getUnitsAvailable()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAvailabilityUpdatableRelationshipsEquals(UnitAvailability expected, UnitAvailability actual) {
        assertThat(actual)
            .as("Verify UnitAvailability relationships")
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()));
    }
}
