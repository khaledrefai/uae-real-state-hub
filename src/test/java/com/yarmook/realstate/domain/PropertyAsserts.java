package com.yarmook.realstate.domain;

import static com.yarmook.realstate.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PropertyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAllPropertiesEquals(Property expected, Property actual) {
        assertPropertyAutoGeneratedPropertiesEquals(expected, actual);
        assertPropertyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAllUpdatablePropertiesEquals(Property expected, Property actual) {
        assertPropertyUpdatableFieldsEquals(expected, actual);
        assertPropertyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAutoGeneratedPropertiesEquals(Property expected, Property actual) {
        assertThat(actual)
            .as("Verify Property auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyUpdatableFieldsEquals(Property expected, Property actual) {
        assertThat(actual)
            .as("Verify Property relevant properties")
            .satisfies(a -> assertThat(a.getExtId()).as("check extId").isEqualTo(expected.getExtId()))
            .satisfies(a -> assertThat(a.getSlug()).as("check slug").isEqualTo(expected.getSlug()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDeveloper()).as("check developer").isEqualTo(expected.getDeveloper()))
            .satisfies(a -> assertThat(a.getArea()).as("check area").isEqualTo(expected.getArea()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getListingType()).as("check listingType").isEqualTo(expected.getListingType()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getSaleStatus()).as("check saleStatus").isEqualTo(expected.getSaleStatus()))
            .satisfies(a -> assertThat(a.getReadiness()).as("check readiness").isEqualTo(expected.getReadiness()))
            .satisfies(a -> assertThat(a.getServiceCharge()).as("check serviceCharge").isEqualTo(expected.getServiceCharge()))
            .satisfies(a -> assertThat(a.getFurnishing()).as("check furnishing").isEqualTo(expected.getFurnishing()))
            .satisfies(a -> assertThat(a.getHasEscrow()).as("check hasEscrow").isEqualTo(expected.getHasEscrow()))
            .satisfies(a -> assertThat(a.getPostHandover()).as("check postHandover").isEqualTo(expected.getPostHandover()))
            .satisfies(a -> assertThat(a.getCompletionDateTime()).as("check completionDateTime").isEqualTo(expected.getCompletionDateTime())
            )
            .satisfies(a ->
                assertThat(a.getMinPrice()).as("check minPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getMinPrice())
            )
            .satisfies(a ->
                assertThat(a.getMaxPrice()).as("check maxPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getMaxPrice())
            )
            .satisfies(a ->
                assertThat(a.getMinPriceAed())
                    .as("check minPriceAed")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMinPriceAed())
            )
            .satisfies(a -> assertThat(a.getPriceCurrency()).as("check priceCurrency").isEqualTo(expected.getPriceCurrency()))
            .satisfies(a -> assertThat(a.getMinArea()).as("check minArea").isEqualTo(expected.getMinArea()))
            .satisfies(a -> assertThat(a.getMaxArea()).as("check maxArea").isEqualTo(expected.getMaxArea()))
            .satisfies(a -> assertThat(a.getAreaUnit()).as("check areaUnit").isEqualTo(expected.getAreaUnit()))
            .satisfies(a -> assertThat(a.getLatitude()).as("check latitude").isEqualTo(expected.getLatitude()))
            .satisfies(a -> assertThat(a.getLongitude()).as("check longitude").isEqualTo(expected.getLongitude()))
            .satisfies(a -> assertThat(a.getCoverUrl()).as("check coverUrl").isEqualTo(expected.getCoverUrl()))
            .satisfies(a -> assertThat(a.getCoverJson()).as("check coverJson").isEqualTo(expected.getCoverJson()))
            .satisfies(a -> assertThat(a.getVideoUrl()).as("check videoUrl").isEqualTo(expected.getVideoUrl()))
            .satisfies(a -> assertThat(a.getBrochureUrl()).as("check brochureUrl").isEqualTo(expected.getBrochureUrl()))
            .satisfies(a -> assertThat(a.getLayoutsPdfUrl()).as("check layoutsPdfUrl").isEqualTo(expected.getLayoutsPdfUrl()))
            .satisfies(a -> assertThat(a.getWebsite()).as("check website").isEqualTo(expected.getWebsite()))
            .satisfies(a -> assertThat(a.getOverviewMd()).as("check overviewMd").isEqualTo(expected.getOverviewMd()))
            .satisfies(a -> assertThat(a.getRaw()).as("check raw").isEqualTo(expected.getRaw()))
            .satisfies(a -> assertThat(a.getBuildingsJson()).as("check buildingsJson").isEqualTo(expected.getBuildingsJson()))
            .satisfies(a -> assertThat(a.getDetailJson()).as("check detailJson").isEqualTo(expected.getDetailJson()))
            .satisfies(a -> assertThat(a.getPublishedAt()).as("check publishedAt").isEqualTo(expected.getPublishedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyUpdatableRelationshipsEquals(Property expected, Property actual) {
        assertThat(actual)
            .as("Verify Property relationships")
            .satisfies(a -> assertThat(a.getMarker()).as("check marker").isEqualTo(expected.getMarker()));
    }
}
