package com.yarmook.realstate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContactLeadAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactLeadAllPropertiesEquals(ContactLead expected, ContactLead actual) {
        assertContactLeadAutoGeneratedPropertiesEquals(expected, actual);
        assertContactLeadAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactLeadAllUpdatablePropertiesEquals(ContactLead expected, ContactLead actual) {
        assertContactLeadUpdatableFieldsEquals(expected, actual);
        assertContactLeadUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactLeadAutoGeneratedPropertiesEquals(ContactLead expected, ContactLead actual) {
        assertThat(actual)
            .as("Verify ContactLead auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactLeadUpdatableFieldsEquals(ContactLead expected, ContactLead actual) {
        assertThat(actual)
            .as("Verify ContactLead relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getWhatsapp()).as("check whatsapp").isEqualTo(expected.getWhatsapp()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getSource()).as("check source").isEqualTo(expected.getSource()))
            .satisfies(a -> assertThat(a.getUtm()).as("check utm").isEqualTo(expected.getUtm()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactLeadUpdatableRelationshipsEquals(ContactLead expected, ContactLead actual) {
        assertThat(actual)
            .as("Verify ContactLead relationships")
            .satisfies(a -> assertThat(a.getSite()).as("check site").isEqualTo(expected.getSite()))
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()));
    }
}
