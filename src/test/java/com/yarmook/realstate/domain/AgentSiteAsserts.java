package com.yarmook.realstate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AgentSiteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentSiteAllPropertiesEquals(AgentSite expected, AgentSite actual) {
        assertAgentSiteAutoGeneratedPropertiesEquals(expected, actual);
        assertAgentSiteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentSiteAllUpdatablePropertiesEquals(AgentSite expected, AgentSite actual) {
        assertAgentSiteUpdatableFieldsEquals(expected, actual);
        assertAgentSiteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentSiteAutoGeneratedPropertiesEquals(AgentSite expected, AgentSite actual) {
        assertThat(actual)
            .as("Verify AgentSite auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentSiteUpdatableFieldsEquals(AgentSite expected, AgentSite actual) {
        assertThat(actual)
            .as("Verify AgentSite relevant properties")
            .satisfies(a -> assertThat(a.getSlug()).as("check slug").isEqualTo(expected.getSlug()))
            .satisfies(a -> assertThat(a.getDisplayName()).as("check displayName").isEqualTo(expected.getDisplayName()))
            .satisfies(a -> assertThat(a.getTheme()).as("check theme").isEqualTo(expected.getTheme()))
            .satisfies(a -> assertThat(a.getPrimaryColor()).as("check primaryColor").isEqualTo(expected.getPrimaryColor()))
            .satisfies(a -> assertThat(a.getSecondaryColor()).as("check secondaryColor").isEqualTo(expected.getSecondaryColor()))
            .satisfies(a -> assertThat(a.getLogoUrl()).as("check logoUrl").isEqualTo(expected.getLogoUrl()))
            .satisfies(a -> assertThat(a.getContactEmail()).as("check contactEmail").isEqualTo(expected.getContactEmail()))
            .satisfies(a -> assertThat(a.getContactPhone()).as("check contactPhone").isEqualTo(expected.getContactPhone()))
            .satisfies(a -> assertThat(a.getContactWhatsapp()).as("check contactWhatsapp").isEqualTo(expected.getContactWhatsapp()))
            .satisfies(a -> assertThat(a.getDomain()).as("check domain").isEqualTo(expected.getDomain()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentSiteUpdatableRelationshipsEquals(AgentSite expected, AgentSite actual) {
        assertThat(actual)
            .as("Verify AgentSite relationships")
            .satisfies(a -> assertThat(a.getOwner()).as("check owner").isEqualTo(expected.getOwner()))
            .satisfies(a -> assertThat(a.getPlan()).as("check plan").isEqualTo(expected.getPlan()));
    }
}
