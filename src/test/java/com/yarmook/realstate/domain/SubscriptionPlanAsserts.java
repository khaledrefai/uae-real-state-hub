package com.yarmook.realstate.domain;

import static com.yarmook.realstate.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SubscriptionPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionPlanAllPropertiesEquals(SubscriptionPlan expected, SubscriptionPlan actual) {
        assertSubscriptionPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscriptionPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionPlanAllUpdatablePropertiesEquals(SubscriptionPlan expected, SubscriptionPlan actual) {
        assertSubscriptionPlanUpdatableFieldsEquals(expected, actual);
        assertSubscriptionPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionPlanAutoGeneratedPropertiesEquals(SubscriptionPlan expected, SubscriptionPlan actual) {
        assertThat(actual)
            .as("Verify SubscriptionPlan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionPlanUpdatableFieldsEquals(SubscriptionPlan expected, SubscriptionPlan actual) {
        assertThat(actual)
            .as("Verify SubscriptionPlan relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a ->
                assertThat(a.getPriceMonthly())
                    .as("check priceMonthly")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPriceMonthly())
            )
            .satisfies(a ->
                assertThat(a.getPriceYearly())
                    .as("check priceYearly")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPriceYearly())
            )
            .satisfies(a -> assertThat(a.getCurrency()).as("check currency").isEqualTo(expected.getCurrency()))
            .satisfies(a ->
                assertThat(a.getStripePriceMonthlyId()).as("check stripePriceMonthlyId").isEqualTo(expected.getStripePriceMonthlyId())
            )
            .satisfies(a ->
                assertThat(a.getStripePriceYearlyId()).as("check stripePriceYearlyId").isEqualTo(expected.getStripePriceYearlyId())
            )
            .satisfies(a -> assertThat(a.getMaxListings()).as("check maxListings").isEqualTo(expected.getMaxListings()))
            .satisfies(a -> assertThat(a.getFeatures()).as("check features").isEqualTo(expected.getFeatures()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionPlanUpdatableRelationshipsEquals(SubscriptionPlan expected, SubscriptionPlan actual) {
        // empty method
    }
}
