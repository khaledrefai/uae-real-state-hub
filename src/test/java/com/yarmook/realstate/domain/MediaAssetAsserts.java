package com.yarmook.realstate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MediaAssetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaAssetAllPropertiesEquals(MediaAsset expected, MediaAsset actual) {
        assertMediaAssetAutoGeneratedPropertiesEquals(expected, actual);
        assertMediaAssetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaAssetAllUpdatablePropertiesEquals(MediaAsset expected, MediaAsset actual) {
        assertMediaAssetUpdatableFieldsEquals(expected, actual);
        assertMediaAssetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaAssetAutoGeneratedPropertiesEquals(MediaAsset expected, MediaAsset actual) {
        assertThat(actual)
            .as("Verify MediaAsset auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaAssetUpdatableFieldsEquals(MediaAsset expected, MediaAsset actual) {
        assertThat(actual)
            .as("Verify MediaAsset relevant properties")
            .satisfies(a -> assertThat(a.getKind()).as("check kind").isEqualTo(expected.getKind()))
            .satisfies(a -> assertThat(a.getUrl()).as("check url").isEqualTo(expected.getUrl()))
            .satisfies(a -> assertThat(a.getMimeType()).as("check mimeType").isEqualTo(expected.getMimeType()))
            .satisfies(a -> assertThat(a.getWidth()).as("check width").isEqualTo(expected.getWidth()))
            .satisfies(a -> assertThat(a.getHeight()).as("check height").isEqualTo(expected.getHeight()))
            .satisfies(a -> assertThat(a.getMediaSize()).as("check mediaSize").isEqualTo(expected.getMediaSize()))
            .satisfies(a -> assertThat(a.getSource()).as("check source").isEqualTo(expected.getSource()))
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getAltText()).as("check altText").isEqualTo(expected.getAltText()))
            .satisfies(a -> assertThat(a.getSortOrder()).as("check sortOrder").isEqualTo(expected.getSortOrder()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaAssetUpdatableRelationshipsEquals(MediaAsset expected, MediaAsset actual) {
        assertThat(actual)
            .as("Verify MediaAsset relationships")
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()));
    }
}
