package com.yarmook.realstate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AgentProfileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentProfileAllPropertiesEquals(AgentProfile expected, AgentProfile actual) {
        assertAgentProfileAutoGeneratedPropertiesEquals(expected, actual);
        assertAgentProfileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentProfileAllUpdatablePropertiesEquals(AgentProfile expected, AgentProfile actual) {
        assertAgentProfileUpdatableFieldsEquals(expected, actual);
        assertAgentProfileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentProfileAutoGeneratedPropertiesEquals(AgentProfile expected, AgentProfile actual) {
        assertThat(actual)
            .as("Verify AgentProfile auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentProfileUpdatableFieldsEquals(AgentProfile expected, AgentProfile actual) {
        assertThat(actual)
            .as("Verify AgentProfile relevant properties")
            .satisfies(a -> assertThat(a.getExternalUserId()).as("check externalUserId").isEqualTo(expected.getExternalUserId()))
            .satisfies(a -> assertThat(a.getFullName()).as("check fullName").isEqualTo(expected.getFullName()))
            .satisfies(a -> assertThat(a.getCompanyName()).as("check companyName").isEqualTo(expected.getCompanyName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getWhatsapp()).as("check whatsapp").isEqualTo(expected.getWhatsapp()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getWebsite()).as("check website").isEqualTo(expected.getWebsite()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgentProfileUpdatableRelationshipsEquals(AgentProfile expected, AgentProfile actual) {
        // empty method
    }
}
