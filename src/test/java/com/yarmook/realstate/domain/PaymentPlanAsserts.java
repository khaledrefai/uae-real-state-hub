package com.yarmook.realstate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentPlanAllPropertiesEquals(PaymentPlan expected, PaymentPlan actual) {
        assertPaymentPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentPlanAllUpdatablePropertiesEquals(PaymentPlan expected, PaymentPlan actual) {
        assertPaymentPlanUpdatableFieldsEquals(expected, actual);
        assertPaymentPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentPlanAutoGeneratedPropertiesEquals(PaymentPlan expected, PaymentPlan actual) {
        assertThat(actual)
            .as("Verify PaymentPlan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentPlanUpdatableFieldsEquals(PaymentPlan expected, PaymentPlan actual) {
        assertThat(actual)
            .as("Verify PaymentPlan relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a ->
                assertThat(a.getMonthsAfterHandover()).as("check monthsAfterHandover").isEqualTo(expected.getMonthsAfterHandover())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentPlanUpdatableRelationshipsEquals(PaymentPlan expected, PaymentPlan actual) {
        assertThat(actual)
            .as("Verify PaymentPlan relationships")
            .satisfies(a -> assertThat(a.getProperty()).as("check property").isEqualTo(expected.getProperty()));
    }
}
