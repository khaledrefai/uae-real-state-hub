package com.yarmook.realstate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BillingSubscriptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingSubscriptionAllPropertiesEquals(BillingSubscription expected, BillingSubscription actual) {
        assertBillingSubscriptionAutoGeneratedPropertiesEquals(expected, actual);
        assertBillingSubscriptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingSubscriptionAllUpdatablePropertiesEquals(BillingSubscription expected, BillingSubscription actual) {
        assertBillingSubscriptionUpdatableFieldsEquals(expected, actual);
        assertBillingSubscriptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingSubscriptionAutoGeneratedPropertiesEquals(BillingSubscription expected, BillingSubscription actual) {
        assertThat(actual)
            .as("Verify BillingSubscription auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingSubscriptionUpdatableFieldsEquals(BillingSubscription expected, BillingSubscription actual) {
        assertThat(actual)
            .as("Verify BillingSubscription relevant properties")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getStripeCustomerId()).as("check stripeCustomerId").isEqualTo(expected.getStripeCustomerId()))
            .satisfies(a ->
                assertThat(a.getStripeSubscriptionId()).as("check stripeSubscriptionId").isEqualTo(expected.getStripeSubscriptionId())
            )
            .satisfies(a -> assertThat(a.getCancelAtPeriodEnd()).as("check cancelAtPeriodEnd").isEqualTo(expected.getCancelAtPeriodEnd()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillingSubscriptionUpdatableRelationshipsEquals(BillingSubscription expected, BillingSubscription actual) {
        assertThat(actual)
            .as("Verify BillingSubscription relationships")
            .satisfies(a -> assertThat(a.getSite()).as("check site").isEqualTo(expected.getSite()));
    }
}
