package com.yarmook.realstate.domain;

import static com.yarmook.realstate.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PropertyMarkerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyMarkerAllPropertiesEquals(PropertyMarker expected, PropertyMarker actual) {
        assertPropertyMarkerAutoGeneratedPropertiesEquals(expected, actual);
        assertPropertyMarkerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyMarkerAllUpdatablePropertiesEquals(PropertyMarker expected, PropertyMarker actual) {
        assertPropertyMarkerUpdatableFieldsEquals(expected, actual);
        assertPropertyMarkerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyMarkerAutoGeneratedPropertiesEquals(PropertyMarker expected, PropertyMarker actual) {
        assertThat(actual)
            .as("Verify PropertyMarker auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyMarkerUpdatableFieldsEquals(PropertyMarker expected, PropertyMarker actual) {
        assertThat(actual)
            .as("Verify PropertyMarker relevant properties")
            .satisfies(a -> assertThat(a.getExtId()).as("check extId").isEqualTo(expected.getExtId()))
            .satisfies(a -> assertThat(a.getArea()).as("check area").isEqualTo(expected.getArea()))
            .satisfies(a -> assertThat(a.getCompletionDate()).as("check completionDate").isEqualTo(expected.getCompletionDate()))
            .satisfies(a -> assertThat(a.getLatitude()).as("check latitude").isEqualTo(expected.getLatitude()))
            .satisfies(a -> assertThat(a.getLongitude()).as("check longitude").isEqualTo(expected.getLongitude()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDeveloper()).as("check developer").isEqualTo(expected.getDeveloper()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getSaleStatus()).as("check saleStatus").isEqualTo(expected.getSaleStatus()))
            .satisfies(a ->
                assertThat(a.getMinPrice()).as("check minPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getMinPrice())
            )
            .satisfies(a -> assertThat(a.getCoverUrl()).as("check coverUrl").isEqualTo(expected.getCoverUrl()))
            .satisfies(a -> assertThat(a.getCoverJson()).as("check coverJson").isEqualTo(expected.getCoverJson()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyMarkerUpdatableRelationshipsEquals(PropertyMarker expected, PropertyMarker actual) {
        // empty method
    }
}
